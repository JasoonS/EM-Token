const EMoneyToken = artifacts.require("EMoneyToken");
const truffleAssert = require('truffle-assertions'); // install with: npm install truffle-assertions

var FundingStatusCode = Object.freeze({"Nonexistent":0, "Ordered":1, "InProcess":2, "Executed":3, "Rejected":4, "Cancelled":5});

contract("EMoneyToken", accounts => {

    // Common to all tests
    const owner = accounts[9]
    const cro = accounts[8]
    const operator = accounts[7]
    const compliance = accounts[6]
    const userAccount1 = accounts[5]
    const userAccount2 = accounts[4]
    const userAccount3 = accounts[3]
    const notary1 = accounts[2]
    const notWhilisted1 = accounts[1]
    const notWhilisted2 = accounts[0]
    
    // Constants for this test
    
    var instance
    var _result

    before( async () => {
        console.log("  > Now testing blah");
        instance = await EMoneyToken.deployed();
        console.log("  > Contract address is", instance.address);
    })

    it("Compliance check functions for funding should work", async () => {
    });


//     // Now testing direct writes to wallets

//     it("Owner should be able to directly add funds to a whitelisted wallet", done => {
//         instance.directAddToWallet(userAccount2, 220000, {from:ownerAccount}).then(_tx => {
//             var event1 = _tx.logs[0]
//             assert.equal(event1.event, "Minted", "Minted event not issued");
//             assert.equal(event1.args.account, userAccount2, "Incorrect argument in Minted event");
//             assert.equal(event1.args.value, 220000, "Incorrect argument in Minted event");
//             var event2 = _tx.logs[1]
//             assert.equal(event2.event, "DirectAddToWallet", "DirectAddToWallet event not issued");
//             assert.equal(event2.args.account, userAccount2, "Incorrect account argument in DirectAddToWallet event")
//             assert.equal(event2.args.value, 220000, "Incorrect value argument in DirectAddToWallet event");
//         })
//         .then(done).catch(done);
//     });

//     it("Owner should be able to directly remove funds to a whitelisted wallet", done => {
//         instance.directRemoveFromWallet(userAccount2, 40000, {from:ownerAccount}).then(_tx => {
//             var event1 = _tx.logs[0]
//             assert.equal(event1.event, "Burned", "Burned event not issued");
//             assert.equal(event1.args.account, userAccount2, "Incorrect argument in Burned event");
//             assert.equal(event1.args.value, 40000, "Incorrect argument in Burned event");
//             var event2 = _tx.logs[1]
//             assert.equal(event2.event, "DirectRemoveFromWallet", "DirectRemoveFromWallet event not issued");
//             assert.equal(event2.args.account, userAccount2, "Incorrect account argument in DirectRemoveFromWallet event")
//             assert.equal(event2.args.value, 40000, "Incorrect value argument in DirectRemoveFromWallet event");
//         })
//         .then(done).catch(done);
//     });

//     it("Wallet balance should be correctly updated after direct adds and removes", done => {
//         instance.balanceOf.call(userAccount2).then(_result => {
//             assert.equal(_result, 220000-40000, "Balance not updated");
//         })
//         .then(done).catch(done);
//     });

//     it("totalSupply should be correctly updated", done => {
//         instance.totalSupply.call().then(_result => {
//             assert.equal(_result, 250000-25000 + 220000-40000, "Total supply not correctly updated");
//         })
//         .then(done).catch(done);
//     });

//     it("Owner should be able to directly set the balance of a whitelisted wallet", done => {
//         instance.directSetWalletBalance(userAccount2, 150000, {from:ownerAccount}).then(_tx => {
//             var event1 = _tx.logs[0]
//             assert.equal(event1.event, "Burned", "Burned event not issued");
//             assert.equal(event1.args.account, userAccount2, "Incorrect argument in Burned event");
//             assert.equal(event1.args.value, 220000-40000, "Incorrect argument in Burned event");
//             var event2 = _tx.logs[1]
//             assert.equal(event2.event, "Minted", "Minted event not issued");
//             assert.equal(event2.args.account, userAccount2, "Incorrect argument in Minted event");
//             assert.equal(event2.args.value, 150000, "Incorrect argument in Minted event");
//             var event3 = _tx.logs[2]
//             assert.equal(event3.event, "DirectSetWalletBalance", "DirectSetWalletBalance event not issued");
//             assert.equal(event3.args.account, userAccount2, "Incorrect account argument in DirectSetWalletBalance event")
//             assert.equal(event3.args.value, 150000, "Incorrect value argument in DirectSetWalletBalance event");
//         })
//         .then(done).catch(done);
//     });

//     it("Wallet balance should be correctly updated after direct balance set", done => {
//         instance.balanceOf.call(userAccount2).then(_result => {
//             assert.equal(_result, 150000, "Balance not updated");
//         })
//         .then(done).catch(done);
//     });

//     it("totalSupply should be correctly updated", done => {
//         instance.totalSupply.call().then(_result => {
//             assert.equal(_result, 250000-25000 + 150000, "Total supply not correctly updated");
//         })
//         .then(done).catch(done);
//     });

//     it("Owner should be able to directly add funds even to a non whitelisted wallet", done => {
//         instance.directAddToWallet(userAccount3, 100000, {from:ownerAccount}).then(_tx => {
//             var event1 = _tx.logs[0]
//             assert.equal(event1.event, "Minted", "Minted event not issued");
//             assert.equal(event1.args.account, userAccount3, "Incorrect argument in Minted event");
//             assert.equal(event1.args.value, 100000, "Incorrect argument in Minted event");
//             var event2 = _tx.logs[1]
//             assert.equal(event2.event, "DirectAddToWallet", "DirectAddToWallet event not issued");
//             assert.equal(event2.args.account, userAccount3, "Incorrect account argument in DirectAddToWallet event")
//             assert.equal(event2.args.value, 100000, "Incorrect value argument in DirectAddToWallet event");
//         })
//         .then(done).catch(done);
//     });

//     it("Wallet balance should be correctly updated after direct add, even to a non whitelisted wallet", done => {
//         instance.balanceOf.call(userAccount3).then(_result => {
//             assert.equal(_result, 100000, "Balance not updated");
//         })
//         .then(done).catch(done);
//     });

//     it("totalSupply should be correctly updated", done => {
//         instance.totalSupply.call().then(_result => {
//             assert.equal(_result, 250000-25000 + 150000 + 100000, "Total supply not correctly updated");
//         })
//         .then(done).catch(done);
//     });

//     it("Owner should be able to directly set the balance of a non whitelisted wallet", done => {
//         instance.directSetWalletBalance(userAccount3, 0, {from:ownerAccount}).then(_tx => {
//             var event1 = _tx.logs[0]
//             assert.equal(event1.event, "Burned", "Burned event not issued");
//             assert.equal(event1.args.account, userAccount3, "Incorrect argument in Burned event");
//             assert.equal(event1.args.value, 100000, "Incorrect argument in Burned event");
//             var event2 = _tx.logs[1]
//             assert.equal(event2.event, "Minted", "Minted event not issued");
//             assert.equal(event2.args.account, userAccount3, "Incorrect argument in Minted event");
//             assert.equal(event2.args.value, 0, "Incorrect argument in Minted event");
//             var event3 = _tx.logs[2]
//             assert.equal(event3.event, "DirectSetWalletBalance", "DirectSetWalletBalance event not issued");
//             assert.equal(event3.args.account, userAccount3, "Incorrect account argument in DirectSetWalletBalance event")
//             assert.equal(event3.args.value, 0, "Incorrect value argument in DirectSetWalletBalance event");
//         })
//         .then(done).catch(done);
//     });

//     it("Wallet balance should be correctly updated after direct balance set", done => {
//         instance.balanceOf.call(userAccount3).then(_result => {
//             assert.equal(_result, 0, "Balance not updated");
//         })
//         .then(done).catch(done);
//     });

//     it("totalSupply should be correctly updated", done => {
//         instance.totalSupply.call().then(_result => {
//             assert.equal(_result, 250000-25000 + 150000, "Total supply not correctly updated");
//         })
//         .then(done).catch(done);
//     });

//     it("Non owner should not be able to directly add funds to a wallet", done => {
//         instance.directAddToWallet(userAccount1, 50000, {from:userAccount1}).then(_tx => {
//             assert.equal(_tx.logs.length, 0, "An event was sent");
//         })
//         .then(done).catch(done);
//     });

//     it("Non owner should not be able to directly remove funds from a wallet", done => {
//         instance.directRemoveFromWallet(userAccount1, 20000, {from:userAccount1}).then(_tx => {
//             assert.equal(_tx.logs.length, 0, "An event was sent");
//         })
//         .then(done).catch(done);
//     });

//     it("Wallet balance should be not change after failed direct add or remove attempts", done => {
//         instance.balanceOf.call(userAccount1).then(_result => {
//             assert.equal(_result, 250000-25000, "Balance not updated");
//         })
//         .then(done).catch(done);
//     });

//     it("Non owner should not be able to directly add funds to a wallet", done => {
//         instance.directSetWalletBalance(userAccount1, 90000, {from:userAccount1}).then(_tx => {
//             assert.equal(_tx.logs.length, 0, "An event was sent");
//         })
//         .then(done).catch(done);
//     });

//     it("Wallet balance should be not change after failed direct balance set attempts", done => {
//         instance.balanceOf.call(userAccount1).then(_result => {
//             assert.equal(_result, 250000-25000, "Balance not updated");
//         })
//         .then(done).catch(done);
//     });

//     // Now testing transfers etc.

//     it("Whitelisted user should be able to transfer funds to other whitelisted users", done => {
//         instance.transfer(userAccount2, 3000, {from:userAccount1}).then(_tx => {
//             var event = _tx.logs[0]
//             assert.equal(event.event, "Transfer", "Transfer event not issued");
//             assert.equal(event.args.from, userAccount1, "Incorrect from account argument in Transfer event")
//             assert.equal(event.args.to, userAccount2, "Incorrect to account argument in Transfer event")
//             assert.equal(event.args.value, 3000, "Incorrect value argument in Transfer event");
//         })
//         .then(done).catch(done);
//     });

//     it("Whitelisted user should not be able to transfer funds to non whitelisted users", done => {
//         instance.transfer(userAccount3, 2000, {from:userAccount1}).then(_tx => {
//             assert.equal(_tx.logs.length, 0, "An event was sent");
//         })
//         .then(done).catch(done);
//     });

//     it("Wallet balances should be correctly updated after transfers", done => {
//         instance.balanceOf.call(userAccount1).then(_result => {
//             assert.equal(_result, 250000-25000-3000, "Sender balance not updated");
//         })
//         instance.balanceOf.call(userAccount2).then(_result => {
//             assert.equal(_result, 150000+3000, "Receiver balance not updated");
//         })
//         .then(done).catch(done);
//     });

//     it("totalSupply should not change after transfers", done => {
//         instance.totalSupply.call().then(_result => {
//             assert.equal(_result, 250000-25000 + 150000, "Total supply not correctly updated");
//         })
//         .then(done).catch(done);
//     });

//     it("Whitelisted user should be able to approve another whitelisted users", done => {
//         instance.approve(userAccount2, 5000, {from:userAccount1}).then(_tx => {
//             var event = _tx.logs[0]
//             assert.equal(event.event, "Approval", "Approval event not issued");
//             assert.equal(event.args.owner, userAccount1, "Incorrect owner account argument in Approval event")
//             assert.equal(event.args.spender, userAccount2, "Incorrect spender account argument in Approval event")
//             assert.equal(event.args.value, 5000, "Incorrect value argument in Approval event");
//         })
//         .then(done).catch(done);
//     });

//     it("Whitelisted user should be able to increase allowance for whitelisted users", done => {
//         instance.increaseAllowance(userAccount2, 3000, {from:userAccount1}).then(_tx => {
//             var event = _tx.logs[0]
//             assert.equal(event.event, "Approval", "Approval event not issued");
//             assert.equal(event.args.owner, userAccount1, "Incorrect owner account argument in Approval event")
//             assert.equal(event.args.spender, userAccount2, "Incorrect spender account argument in Approval event")
//             assert.equal(event.args.value, 5000+3000, "Incorrect value argument in Approval event");
//         })
//         .then(done).catch(done);
//     });

//     it("Whitelisted user should be able to decrease allowance for whitelisted users", done => {
//         instance.decreaseAllowance(userAccount2, 1000, {from:userAccount1}).then(_tx => {
//             var event = _tx.logs[0]
//             assert.equal(event.event, "Approval", "Approval event not issued");
//             assert.equal(event.args.owner, userAccount1, "Incorrect ownder account argument in Approval event")
//             assert.equal(event.args.spender, userAccount2, "Incorrect spender account argument in Approval event")
//             assert.equal(event.args.value, 5000+3000-1000, "Incorrect value argument in Approval event");
//         })
//         .then(done).catch(done);
//     });

//     it("Allowances should be correctly updated after approvals", done => {
//         instance.allowance.call(userAccount1, userAccount2).then(_result => {
//             assert.equal(_result, 5000+3000-1000, "Allowance not updated");
//         })
//         .then(done).catch(done);
//     });

//     it("Wallet balances should not change after approvals", done => {
//         instance.balanceOf.call(userAccount1).then(_result => {
//             assert.equal(_result, 250000-25000-3000, "Sender balance not updated");
//         })
//         instance.balanceOf.call(userAccount2).then(_result => {
//             assert.equal(_result, 150000+3000, "Receiver balance not updated");
//         })
//         .then(done).catch(done);
//     });

//     it("Allowed spender should be able to spend within the allowance", done => {
//         instance.transferFrom(userAccount1, userAccount2, 4000, {from:userAccount2}).then(_tx => {
//             var event1 = _tx.logs[0]
//             assert.equal(event1.event, "Transfer", "Transfer event not issued");
//             assert.equal(event1.args.from, userAccount1, "Incorrect from account argument in Transfer event")
//             assert.equal(event1.args.to, userAccount2, "Incorrect to account argument in Transfer event")
//             assert.equal(event1.args.value, 4000, "Incorrect value argument in Transfer event");
//             var event2 = _tx.logs[1]
//             assert.equal(event2.event, "Approval", "Approval event not issued");
//             assert.equal(event2.args.owner, userAccount1, "Incorrect from account argument in Approval event")
//             assert.equal(event2.args.spender, userAccount2, "Incorrect to account argument in Approval event")
//             assert.equal(event2.args.value, 5000+3000-1000-4000, "Incorrect value argument in Approval event");
//         })
//         .then(done).catch(done);
//     });

//     it("Allowed spender should be not able to spend outside the allowance", done => {
//         instance.transferFrom(userAccount1, userAccount2, 10000, {from:userAccount2}).then(_tx => {
//             assert.equal(_tx.logs.length, 0, "And event was sent");
//         })
//         .then(done).catch(done);
//     });

//     it("Allowances should be correctly updated after spending", done => {
//         instance.allowance.call(userAccount1, userAccount2).then(_result => {
//             assert.equal(_result, 5000+3000-1000-4000, "Allowance not updated");
//         })
//         .then(done).catch(done);
//     });

//     it("Whitelisted user should not be able to approve non whitelisted users", done => {
//         instance.approve(userAccount3, 5000, {from:userAccount1}).then(_tx => {
//             assert.equal(_tx.logs.length, 0, "And event was sent");
//         })
//         .then(done).catch(done);
//     });

//     it("Whitelisted user should not be able to increase allowance for whitelisted users", done => {
//         instance.increaseAllowance(userAccount3, 3000, {from:userAccount1}).then(_tx => {
//             assert.equal(_tx.logs.length, 0, "And event was sent");
//         })
//         .then(done).catch(done);
//     });

//     it("No allowance should be set for non whitelisted users after attempts", done => {
//         instance.allowance.call(userAccount1, userAccount3).then(_result => {
//             assert.equal(_result, 0, "Allowance not updated");
//         })
//         .then(done).catch(done);
//     });

//     it("Wallet balances should be correctly updated after transferFrom's", done => {
//         instance.balanceOf.call(userAccount1).then(_result => {
//             assert.equal(_result, 250000-25000-3000-4000, "Sender balance not updated");
//         })
//         instance.balanceOf.call(userAccount2).then(_result => {
//             assert.equal(_result, 150000+3000+4000, "Receiver balance not updated");
//         })
//         .then(done).catch(done);
//     });

//     it("totalSupply should not change after transferFrom's", done => {
//         instance.totalSupply.call().then(_result => {
//             assert.equal(_result, 250000-25000 + 150000, "Total supply not correctly updated");
//         })
//         .then(done).catch(done);
//     });

});
